package com.revature.dao;

import java.util.*;
import java.io.*;

import com.revature.beans.Account;
import com.revature.beans.User;

/**
 * Implementation of AccountDAO which reads/writes to files
 */
public class AccountDaoFile implements AccountDao {
	// use this file location to persist the data to
	public static String fileLocation = "";

	public Account addAccount(Account a) {
		// TODO Auto-generated method stub
		
		// remeber Users has a list of Account named accounts
		return null;
	}

	public Account getAccount(Integer actId) {
		// TODO Auto-generated method stub
		
		Account a = null;
		List<Account> acon = getAccounts();
		for (Account account: acon) {
			if (account.getId().equals(actId)) {
				a = account;
				break;
			}
		}
		//add to the thing;
		return a;
	}


	public List<Account> getAccounts() {
		// TODO Auto-generated method stub
		List<Account> accs = new ArrayList<>();;
		try(ObjectInputStream ois = new ObjectInputStream(new FileInputStream(fileLocation))) {
			// Check if the object is available to be read
			accs = (List<Account>) ois.readObject();
			
		} catch (FileNotFoundException e) {
			return accs;
		} catch (IOException | ClassNotFoundException e) {
			System.out.println("Exception " + e.getClass().getName() + " thrown in getAccounts()");
		}
		return accs;
		return null;
	}

	public List<Account> getAccountsByUser(User u) {
		// TODO Auto-generated method stub
		List<Account> accGrab = new ArrayList();
		List<Account> existA = getAccounts();
		for (Account a : existA) {
			if (a.getOwnerId().equals(u.getId())) {
				accGrab.add(a);
			}
		}
	
		return accGrab;
	}

	public Account updateAccount(Account a) {
		// TODO Auto-generated method stub
		List<Account> accs = getAccounts();
		try {
			if (accs.removeIf(acc -> acc.getId().equals(a.getId()))) {
				accs.add(a);
				return a;
			}
			
		} finally {
			//addto thing
			
		}
		return null;
	}

	public boolean removeAccount(Account a) {
		// TODO Auto-generated method stub
		List<Account> getA = getAccounts();
		boolean getB = getA.removeIf(accon -> accon.equals(a));
		//addto thing;
		return getB;
	}

}
